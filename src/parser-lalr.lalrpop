// FIXME#1
//
// We currently accept `if return { /* expr */ } { /* then */ }` but
// it is unclear if we *should* do so (in fact, I would argue that we
// should not, because it is inconsistent with `if Struct { ... }`)
// and `if 3 .. {`. Options to resolve:
//
//    - disallow `if return/break/continue` altogether
//      - I lump in `break/continue` to allow for future compat where
//        they take an argument, but also because they are all
//        unconditionall diverging control-flow expressions
//    - permit `if return/break/continue` but not with a block argument
//      - consistent, but what's the point?
//    - kepe things as they are today
//
// I opted for #1 so far.
//
// FIXME#2
//
// I am currently disallowing things like `x as (i32) < y as (i32)`;
// to fix this I have to propagate the restrictions against type
// arguments into the Ty grammar.

grammar["LALR(1)"];

pub crate: () = {
  shebang? inner_attr* mod_item* => (),
};
shebang: () = {
  SHEBANG_LINE => (),
};
inner_attr: () = {
  SHEBANG "[" meta_item "]" => (),
  INNER_DOC_COMMENT => (),
};
maybe_outer_attrs: () = {
  outer_attrs => (),
  () => (),
};
outer_attrs: () = {
  outer_attr => (),
  outer_attrs outer_attr => (),
};
outer_attr: () = {
  "#" "[" meta_item "]" => (),
  OUTER_DOC_COMMENT => (),
};
meta_item: () = {
  ident => (),
  ident "=" lit => (),
  ident "(" Comma<meta_item> ")" => (),
};
meta_seq: () = {
  () => (),
  meta_item => (),
  meta_seq "," meta_item => (),
};
attrs_and_vis: () = {
  maybe_outer_attrs visibility => (),
};
mod_item: () = {
  attrs_and_vis item => (),
};
item: () = {
  stmt_item => (),
  item_macro => (),
};
stmt_item: () = {
  item_static => (),
  item_const => (),
  item_type => (),
  block_item => (),
  view_item => (),
};
item_static: () = {
  "static" ident ":" ty "=" Expr ";" => (),
  "static" "mut" ident ":" ty "=" Expr ";" => (),
};
item_const: () = {
  "const" ident ":" ty "=" Expr ";" => (),
};
item_macro: () = {
  PathExpr "!" ident? parens_delimited_token_trees ";" => (),
  PathExpr "!" ident? braces_delimited_token_trees => (),
  PathExpr "!" ident? brackets_delimited_token_trees ";" => (),
};
view_item: () = {
  use_item => (),
  extern_fn_item => (),
  "extern" "crate" ident ";" => (),
  "extern" "crate" ident "as" ident ";" => (),
};
extern_fn_item: () = {
  "extern" abi? item_fn => (),
};
use_item: () = {
  "use" view_path ";" => (),
};
view_path: () = {
  path_no_types_allowed => (),
  path_no_types_allowed "::" "{" "}" => (),
  "::" "{" "}" => (),
  path_no_types_allowed "::" "{" idents_or_self "}" => (),
  "::" "{" idents_or_self "}" => (),
  path_no_types_allowed "::" "{" idents_or_self "," "}" => (),
  "::" "{" idents_or_self "," "}" => (),
  path_no_types_allowed "::" "*" => (),
  "{" "}" => (),
  "{" idents_or_self "}" => (),
  "{" idents_or_self "," "}" => (),
  path_no_types_allowed "as" ident => (),
};
block_item: () = {
  item_fn => (),
  item_unsafe_fn => (),
  item_mod => (),
  item_foreign_mod => (),
  item_struct => (),
  item_enum => (),
  item_trait => (),
  item_impl => (),
};
maybe_ty_ascription: () = {
  ":" ty_sum => (),
  () => (),
};
maybe_init_expr: () = {
  "=" Expr => (),
  () => (),
};
item_struct: () = {
  "struct" ident generic_params maybe_where_clause struct_decl_args => (),
  "struct" ident generic_params struct_tuple_args maybe_where_clause ";" => (),
  "struct" ident generic_params maybe_where_clause ";" => (),
};
struct_decl_args: () = {
  "{" struct_decl_fields "}" => (),
  "{" struct_decl_fields "," "}" => (),
};
struct_tuple_args: () = {
  "(" struct_tuple_fields ")" => (),
  "(" struct_tuple_fields "," ")" => (),
};
struct_decl_fields: () = {
  struct_decl_field => (),
  struct_decl_fields "," struct_decl_field => (),
  () => (),
};
struct_decl_field: () = {
  attrs_and_vis ident ":" ty_sum => (),
};
struct_tuple_fields: () = {
  struct_tuple_field => (),
  struct_tuple_fields "," struct_tuple_field => (),
};
struct_tuple_field: () = {
  attrs_and_vis ty_sum => (),
};
item_enum: () = {
  "enum" ident generic_params maybe_where_clause "{" enum_defs "}" => (),
  "enum" ident generic_params maybe_where_clause "{" enum_defs "," "}" => (),
};
enum_defs: () = {
  enum_def => (),
  enum_defs "," enum_def => (),
  () => (),
};
enum_def: () = {
  attrs_and_vis ident enum_args => (),
};
enum_args: () = {
  "{" struct_decl_fields "}" => (),
  "{" struct_decl_fields "," "}" => (),
  "(" maybe_ty_sums ")" => (),
  "=" Expr => (),
  () => (),
};
item_mod: () = {
  "mod" ident ";" => (),
  "mod" ident "{" inner_attr* mod_item* "}" => (),
};
item_foreign_mod: () = {
  "extern" abi? "{" inner_attr* foreign_item* "}" => (),
};
abi: () = {
  str => (),
};
foreign_item: () = {
  attrs_and_vis "static" item_foreign_static => (),
  attrs_and_vis item_foreign_fn => (),
  attrs_and_vis "unsafe" item_foreign_fn => (),
};
item_foreign_static: () = {
  "mut"? ident ":" ty ";" => (),
};
item_foreign_fn: () = {
  "fn" ident generic_params fn_decl_allow_variadic maybe_where_clause ";" => (),
};
fn_decl_allow_variadic: () = {
  fn_params_allow_variadic ret_ty => (),
};
fn_params_allow_variadic: () = {
  "(" ")" => (),
  "(" params ")" => (),
  "(" params "," ")" => (),
  "(" params "," "..." ")" => (),
};
visibility: () = {
  "pub" => (),
  () => (),
};
idents_or_self: () = {
  ident_or_self => (),
  ident_or_self "as" ident => (),
  idents_or_self "," ident_or_self => (),
};
ident_or_self: () = {
  ident => (),
  "self" => (),
};
item_type: () = {
  "type" ident generic_params maybe_where_clause "=" ty_sum ";" => (),
};
for_sized: () = {
  "for" "?" ident => (),
  "for" ident "?" => (),
  () => (),
};
item_trait: () = {
  maybe_unsafe "trait" ident generic_params for_sized maybe_ty_param_bounds maybe_where_clause "{" maybe_trait_items "}" => (),
};
maybe_trait_items: () = {
  trait_items => (),
  () => (),
};
trait_items: () = {
  trait_item => (),
  trait_items trait_item => (),
};
trait_item: () = {
  trait_const => (),
  trait_type => (),
  trait_method => (),
};
trait_const: () = {
  maybe_outer_attrs "const" ident maybe_ty_ascription maybe_const_default ";" => (),
};
maybe_const_default: () = {
  "=" Expr => (),
  () => (),
};
trait_type: () = {
  maybe_outer_attrs "type" ty_param ";" => (),
};
maybe_unsafe: () = {
  "unsafe" => (),
  () => (),
};
trait_method: () = {
  type_method => (),
  method => (),
};
type_method: () = {
  attrs_and_vis maybe_unsafe "fn" ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause ";" => (),
  attrs_and_vis maybe_unsafe "extern" abi? "fn" ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause ";" => (),
};
method: () = {
  attrs_and_vis maybe_unsafe "fn" ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause inner_attrs_and_block => (),
  attrs_and_vis maybe_unsafe "extern" abi? "fn" ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause inner_attrs_and_block => (),
};
impl_method: () = {
  attrs_and_vis maybe_unsafe "fn" ident generic_params fn_decl_with_self maybe_where_clause inner_attrs_and_block => (),
  attrs_and_vis maybe_unsafe "extern" abi? "fn" ident generic_params fn_decl_with_self maybe_where_clause inner_attrs_and_block => (),
};
item_impl: () = {
  maybe_unsafe "impl" generic_params ty_prim_sum maybe_where_clause "{" inner_attr* maybe_impl_items "}" => (),
  maybe_unsafe "impl" generic_params "(" ty ")" maybe_where_clause "{" inner_attr* maybe_impl_items "}" => (),
  maybe_unsafe "impl" generic_params trait_ref "for" ty_sum maybe_where_clause "{" inner_attr* maybe_impl_items "}" => (),
  maybe_unsafe "impl" generic_params "!" trait_ref "for" ty_sum maybe_where_clause "{" inner_attr* maybe_impl_items "}" => (),
  maybe_unsafe "impl" generic_params trait_ref "for" ".." "{" "}" => (),
  maybe_unsafe "impl" generic_params "!" trait_ref "for" ".." "{" "}" => (),
};
maybe_impl_items: () = {
  impl_items => (),
  () => (),
};
impl_items: () = {
  impl_item => (),
  impl_item impl_items => (),
};
impl_item: () = {
  impl_method => (),
  attrs_and_vis item_macro => (),
  impl_const => (),
  impl_type => (),
};
impl_const: () = {
  attrs_and_vis item_const => (),
};
impl_type: () = {
  attrs_and_vis "type" ident generic_params "=" ty_sum ";" => (),
};
item_fn: () = {
  "fn" ident generic_params fn_decl maybe_where_clause inner_attrs_and_block => (),
};
item_unsafe_fn: () = {
  "unsafe" "fn" ident generic_params fn_decl maybe_where_clause inner_attrs_and_block => (),
  "unsafe" "extern" abi? "fn" ident generic_params fn_decl maybe_where_clause inner_attrs_and_block => (),
};
fn_decl: () = {
  fn_params ret_ty => (),
};
fn_decl_with_self: () = {
  fn_params_with_self ret_ty => (),
};
fn_decl_with_self_allow_anon_params: () = {
  fn_anon_params_with_self ret_ty => (),
};
fn_params: () = {
  "(" maybe_params ")" => (),
};
fn_anon_params: () = {
  "(" anon_param anon_params_allow_variadic_tail ")" => (),
  "(" ")" => (),
};
fn_params_with_self: () = {
  "(" "mut"? "self" maybe_ty_ascription maybe_comma_params ")" => (),
  "(" "&[]" "mut"? "self" maybe_ty_ascription maybe_comma_params ")" => (),
  "(" "&[]" lifetime "mut"? "self" maybe_ty_ascription maybe_comma_params ")" => (),
  "(" maybe_params ")" => (),
};
fn_anon_params_with_self: () = {
  "(" "mut"? "self" maybe_ty_ascription maybe_comma_anon_params ")" => (),
  "(" "&[]" "mut"? "self" maybe_ty_ascription maybe_comma_anon_params ")" => (),
  "(" "&[]" lifetime "mut"? "self" maybe_ty_ascription maybe_comma_anon_params ")" => (),
  "(" maybe_anon_params ")" => (),
};
maybe_params: () = {
  params => (),
  params "," => (),
  () => (),
};
params: () = {
  param => (),
  params "," param => (),
};
param: () = {
  Pat ":" ty_sum => (),
};
inferrable_param: () = {
  Pat maybe_ty_ascription => (),
};
maybe_comma_params: () = {
  "," => (),
  "," params => (),
  "," params "," => (),
  () => (),
};
maybe_comma_anon_params: () = {
  "," => (),
  "," anon_params => (),
  "," anon_params "," => (),
  () => (),
};
maybe_anon_params: () = {
  anon_params => (),
  anon_params "," => (),
  () => (),
};
anon_params: () = {
  anon_param => (),
  anon_params "," anon_param => (),
};
anon_param: () = {
  named_arg ":" ty => (),
  ty => (),
};
anon_params_allow_variadic_tail: () = {
  "," "..." => (),
  "," anon_param anon_params_allow_variadic_tail => (),
  () => (),
};
named_arg: () = {
  ident => (),
  "_" => (),
  "&[]" ident => (),
  "&[]" "_" => (),
  "mut" ident => (),
};
ret_ty: () = {
  "->" "!" => (),
  "->" ty => (),
  () => (),
};
generic_params: () = {
  TyLt lifetimes TyGt => (),
  TyLt lifetimes "," TyGt => (),
  TyLt lifetimes "," ty_params TyGt => (),
  TyLt lifetimes "," ty_params "," TyGt => (),
  TyLt ty_params TyGt => (),
  TyLt ty_params "," TyGt => (),
  () => (),
};
maybe_where_clause: () = {
  () => (),
  where_clause => (),
};
where_clause: () = {
  "where" where_predicates => (),
  "where" where_predicates "," => (),
};
where_predicates: () = {
  where_predicate => (),
  where_predicates "," where_predicate => (),
};
where_predicate: () = {
  for_lifetimes? lifetime ":" bounds => (),
  for_lifetimes ty ":" ty_param_bounds => (),
};
for_lifetimes: () = {
  "for" TyLt lifetimes TyGt => (),
};
ty_params: () = {
  ty_param => (),
  ty_params "," ty_param => (),
};
path_no_types_allowed: () = {
  ident => (),
  "::" ident => (),
  "self" => (),
  "::" "self" => (),
  path_no_types_allowed "::" ident => (),
};
GenericArgs: () = {
  TyLt generic_values TyGt => (),
};
generic_values: () = {
  maybe_lifetimes maybe_ty_sums_and_or_bindings => (),
};
maybe_ty_sums_and_or_bindings: () = {
  ty_sums => (),
  ty_sums "," => (),
  ty_sums "," bindings => (),
  bindings => (),
  bindings "," => (),
  () => (),
};
maybe_bindings: () = {
  "," bindings => (),
  () => (),
};

#[inline]
Pat: () = PatWithBindingMode<BindingMode>;

PatWithBindingMode<BM>: () = {
    "_" => (),
    AnyAmp PatWithBindingMode<RefBindingMode> => (),
    AnyAmp "mut" Pat => (),
    "(" Comma<Pat> ")" => (),
    "[" PatVec "]" => (),
    lit_or_path => (),
    lit_or_path "..." lit_or_path => (),
    PathExpr "{" PatStruct "}" => (),
    PathExpr "(" ".." ")" => (),
    PathExpr "(" Comma<Pat> ")" => (),
    PathExpr "!" ident? delimited_token_trees => (),
    BM ident => (),
    ident "@" Pat => (),
    BM ident "@" Pat => (),
    "box" Pat => (),
    TyLt ty_sum maybe_as_trait_ref TyGt "::" ident => (),
};
pats_or: () = {
  Pat => (),
  pats_or "|[]" Pat => (),
};
BindingMode: () = {
    RefBindingMode,
    "mut" => (),
};
RefBindingMode: () = {
    "ref" => (),
    "ref" "mut" => (),
};
lit_or_path: () = {
  PathExpr => (),
  lit => (),
  "-" lit => (),
};
PatField: () = {
  ident => (),
  BindingMode ident => (),
  "box" ident => (),
  "box" BindingMode ident => (),
  ident ":" Pat => (),
  BindingMode ident ":" Pat => (),
};
PatFields: () = {
  PatField => (),
  PatFields "," PatField => (),
};
PatStruct: () = {
  PatFields => (),
  PatFields "," => (),
  PatFields "," ".." => (),
  ".." => (),
};
PatVec: () = {
  PatVec_elts => (),
  PatVec_elts "," => (),
  PatVec_elts ".." => (),
  PatVec_elts "," ".." => (),
  PatVec_elts ".." "," PatVec_elts => (),
  PatVec_elts ".." "," PatVec_elts "," => (),
  PatVec_elts "," ".." "," PatVec_elts => (),
  PatVec_elts "," ".." "," PatVec_elts "," => (),
  ".." "," PatVec_elts => (),
  ".." "," PatVec_elts "," => (),
  ".." => (),
  () => (),
};
PatVec_elts: () = {
  Pat => (),
  PatVec_elts "," Pat => (),
};
ty: () = {
  ty_prim => (),
  TyLt ty_sum maybe_as_trait_ref TyGt "::" ident => (),
  "(" ty_sums ")" => (),
  "(" ty_sums "," ")" => (),
  "(" ")" => (),
};
ty_prim: () = {
  Path<Epsilon> => (),
  "box" ty => (),
  "*" mut_or_const ty => (),
  AnyAmp ty => (),
  AnyAmp "mut" ty => (),
  AnyAmp lifetime "mut"? ty => (),
  "[" ty "]" => (),
  "[" ty "," ".." Expr "]" => (),
  "[" ty ";" Expr "]" => (),
  "typeof" "(" Expr ")" => (),
  "_" => (),
  ty_bare_fn => (),
  for_in_type => (),
};
ty_bare_fn: () = {
  "fn" ty_fn_decl => (),
  "unsafe" "fn" ty_fn_decl => (),
  "extern" abi? "fn" ty_fn_decl => (),
  "unsafe" "extern" abi? "fn" ty_fn_decl => (),
};
ty_fn_decl: () = {
  generic_params fn_anon_params ret_ty => (),
};
for_in_type: () = {
  "for" TyLt maybe_lifetimes TyGt for_in_type_suffix => (),
};
for_in_type_suffix: () = {
  ty_bare_fn => (),
  trait_ref => (),
};
mut_or_const: () = {
  "mut" => (),
  "const" => (),
};
ty_qualified_path_and_generic_values: () = {
  ty_qualified_path maybe_bindings => (),
  ty_qualified_path "," ty_sums maybe_bindings => (),
};
ty_qualified_path: () = {
  ty_sum "as" trait_ref TyGt "::" ident => (),
  ty_sum "as" trait_ref TyGt "::" ident "+" ty_param_bounds => (),
};
maybe_ty_sums: () = {
  ty_sums => (),
  ty_sums "," => (),
  () => (),
};
ty_sums: () = {
  ty_sum => (),
  ty_sums "," ty_sum => (),
};
ty_sum: () = {
  ty => (),
  ty "+" ty_param_bounds => (),
};
ty_prim_sum: () = {
  ty_prim => (),
  ty_prim "+" ty_param_bounds => (),
};
maybe_ty_param_bounds: () = {
  ":" ty_param_bounds => (),
  () => (),
};
ty_param_bounds: () = {
  boundseq => (),
  () => (),
};
boundseq: () = {
  polybound => (),
  boundseq "+" polybound => (),
};
polybound: () = {
  "for" TyLt maybe_lifetimes TyGt bound => (),
  bound => (),
  "?" bound => (),
};
bindings: () = {
  binding => (),
  bindings "," binding => (),
};
binding: () = {
  ident "=" ty => (),
};
ty_param: () = {
  ident maybe_ty_param_bounds maybe_ty_default => (),
  ident "?" ident maybe_ty_param_bounds maybe_ty_default => (),
};
maybe_bounds: () = {
  ":" bounds => (),
  () => (),
};
bounds: () = {
  bound => (),
  bounds "+" bound => (),
};
bound: () = {
  lifetime => (),
  trait_ref => (),
};
maybe_ltbounds: () = {
  ":" ltbounds => (),
  () => (),
};
ltbounds: () = {
  lifetime => (),
  ltbounds "+" lifetime => (),
};
maybe_ty_default: () = {
  "=" ty_sum => (),
  () => (),
};
maybe_lifetimes: () = {
  lifetimes => (),
  lifetimes "," => (),
  () => (),
};
lifetimes: () = {
  lifetime_and_bounds => (),
  lifetimes "," lifetime_and_bounds => (),
};
lifetime_and_bounds: () = {
  LIFETIME maybe_ltbounds => (),
  "'static" => (),
};
lifetime: () = {
  LIFETIME => (),
  "'static" => (),
};
trait_ref: () = {
  Path<Epsilon> => (),
};
inner_attrs_and_block: () = {
  "{" inner_attr* maybe_stmts "}" => (),
};
block: () = {
  "{" maybe_stmts "}" => (),
};
maybe_stmts: () = {
  stmts => (),
  stmts ExprNoStmtLike => (),
  ExprNoStmtLike => (),
  () => (),
};
stmts: () = {
  stmt => (),
  stmts stmt => (),
};
stmt: () = {
  let => (),
  stmt_item => (),
  "pub" stmt_item => (),
  outer_attrs stmt_item => (),
  outer_attrs "pub" stmt_item => (),
  ExprStmtLike => (),
  block => (),
  ExprNoStmtLike ";" => (),
  ";" => (),
};

PathExpr: () = {
    Path<"::">
};

// Parses a path like `x::y::z`, where A is the token that separates
// the generic arguments.
Path<ARG_SEP>: () = {
    ident => (),
    "::" ident => (),
    "self" "::" ident => (),
    "super" "::" ident => (),
    Path<ARG_SEP> "::" ident => (),
    Path<ARG_SEP> ARG_SEP GenericArgs => (),
};

MacroExpr: () = {
  PathExpr "!" ident? parens_delimited_token_trees => (),
  PathExpr "!" ident? brackets_delimited_token_trees => (),
};

// New-style names:
Expr: () = ExprRestricted<"S","B","L">;
ExprNoStruct: () = ExprRestricted<"","B","L">;
ExprNoStmtLike: () = ExprRestricted<"S","","">;

// The parameters must be either "" or "[SBLT]". They
// are used to select subsets of expressions. Not all
// the parameters apply to all subsets of expressions.
//
// - S: if non-empty, include struct expressions
// - B: if non-empty, include block expressions
// - L: if non-empty, include stmt-like expressions
// - T: if non-empty, include expressions ending in a type
ExprRestricted<S,B,L>: () = {
    ExprOrOr<S,B,L> => (),
    "return" if S != "" => (), // FIXME#1
    "return" ExprOptionalRhs<S,B,L> if S != "" => (), // FIXME#1
    ".." => (),
    LambdaExpr<S,B,L> => (),
    "move" LambdaExpr<S,B,L> => (),
    ExprOrOr<S,B,L> "=" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> "<-" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> ".." => (),
    ExprOrOr<S,B,L> ".." ExprOptionalRhs<S,B,L> => (),
    ExprOrOr<S,B,L> "<<=" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> ">>=" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> "-=" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> "&=" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> "|=" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> "+=" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> "*=" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> "/=" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> "^=" ExprRestricted<S,B,L> => (),
    ExprOrOr<S,B,L> "%=" ExprRestricted<S,B,L> => (),
};

// When you have an optional RHS, such as in a `..` expression, we
// can't allow block expressions if we are not allowed struct
// expressions. So toggle B to "" if S is "". The reason is that
// otherwise you get an ambiguity:
//
//     ... if 0 .. { 22 } ...
//                 ^~~~~~ body of the if, or RHS of the `..`?
ExprOptionalRhs<S,B,L>: () = {
    ExprRestricted<S,"",L> if S == "", // if structs are disabled, disable blocks
    ExprRestricted<S,B,L> if S != "", // if structs are enabled, pass everything thru
};

ExprOrOr<S,B,L>: () = {
    ExprAndAnd<S,B,L>,
    ExprOrOr<S,B,L> "|[|]" "|[]" ExprAndAnd<S,B,L> => (),
};

ExprAndAnd<S,B,L>: () = {
    ExprEq<S,B,L>,
    ExprAndAnd<S,B,L> "&[&]" "&[]" ExprEq<S,B,L> => (),
};

ExprEq<S,B,L>: () = {
    ExprSuffix<S,B,L> "as" ty => (), // FIXME#2
    ExprEqOp<S,B,L,"">,
};

ExprEqOp<S,B,L,T>: () = {
    ExprOr<S,B,L,T>,
    ExprOr<S,B,L,"T"> "==" ExprOr<S,B,L,T> => (),
    ExprOr<S,B,L,"T"> "!=" ExprOr<S,B,L,T> => (),
    ExprOr<S,B,L,""> "<[]" ExprOr<S,B,L,T> => (),
    ExprOr<S,B,L,"T"> ">[]" ExprOr<S,B,L,T> => (),
    ExprOr<S,B,L,"T"> "<=" ExprOr<S,B,L,T> => (),
    ExprOr<S,B,L,"T"> ">=" ExprOr<S,B,L,T> => (),
};

ExprOr<S,B,L,T>: () = {
    ExprXor<S,B,L,T>,
    ExprOr<S,B,L,"T"> "|[]" ExprXor<S,B,L,T> => (),
};

ExprXor<S,B,L,T>: () = {
    ExprAnd<S,B,L,T>,
    ExprXor<S,B,L,"T"> "^" ExprAnd<S,B,L,T> => (),
};

ExprAnd<S,B,L,T>: () = {
    ExprShift<S,B,L,T>,
    ExprAnd<S,B,L,"T"> "&[]" ExprShift<S,B,L,T> => (),
};

ExprShift<S,B,L,T>: () = {
    ExprPlusMinus<S,B,L,T>,
    ExprShift<S,B,L,""> "<[<]" "<[]" ExprPlusMinus<S,B,L,""> => (),
    ExprShift<S,B,L,""> ">[>]" ">[]" ExprPlusMinus<S,B,L,""> => (),
};

ExprPlusMinus<S,B,L,T>: () = {
    ExprMulDiv<S,B,L,T>,
    ExprPlusMinus<S,B,L,"T"> "+" ExprMulDiv<S,B,L,T> => (),
    ExprPlusMinus<S,B,L,"T"> "-" ExprMulDiv<S,B,L,T> => (),
};

ExprMulDiv<S,B,L,T>: () = {
    ExprAs<S,B,L,T>,
    ExprMulDiv<S,B,L,"T"> "*" ExprAs<S,B,L,T> => (),
    ExprMulDiv<S,B,L,"T"> "/" ExprAs<S,B,L,T> => (),
    ExprMulDiv<S,B,L,"T"> "%" ExprAs<S,B,L,T> => (),
};

ExprAs<S,B,L,T>: () = {
    ExprSuffix<S,B,L>,
    ExprSuffix<S,B,L> "as" ty if T != "" => (), // FIXME#2
};

ExprSuffix<S,B,L>: () = {
    ExprAtom<S,B,L>,
    ExprSuffix<S,B,L> "." Path<"::"> => (),
    ExprSuffix<S,B,L> "." LIT_INTEGER => (),
    ExprSuffix<S,B,L> "[" Expr "]" => (),
    ExprSuffix<S,B,L> "(" Comma<Expr> ")" => (),
};

ExprPrefix<S,B,L>: () = {
    "box" ExprPrefix<S,B,L> => (),
    "-" ExprPrefix<S,B,L> => (),
    "!" ExprPrefix<S,B,L> => (),
    "*" ExprPrefix<S,B,L> => (),
    AnyAmp "mut"? ExprPrefix<S,B,L> => (),
};

ExprAtom<S,B,L>: () = {
    lit => (),
    PathExpr => (),
    "self" => (),
    MacroExpr => (),
    PathExpr "{" StructExprFields "}" if S != "" => (),
    "(" Comma<Expr> ")" => (),
    "[" Comma<Expr> "]" => (),
    "[" Expr ";" Expr "]" => (),
    "continue" if S != "" => (), // FIXME#1
    "continue" ident if S != "" => (), // FIXME#1
    "break" if S != "" => (), // FIXME#1
    "break" ident if S != "" => (), // FIXME#1
    Expr_qualified_path => (),
    ExprStmtLike if L != "" => (),
    block if B != "" => (),
};

Expr_qualified_path: () = {
  TyLt ty_sum maybe_as_trait_ref TyGt "::" ident maybe_qpath_params => (),
};

maybe_qpath_params: () = {
  "::" GenericArgs => (),
  () => (),
};
maybe_as_trait_ref: () = {
  "as" trait_ref => (),
  () => (),
};

LambdaExpr<S,B,L>: () = {
    AnyPipe Comma<inferrable_param> "|[]" ExprRestricted<S,B,L> => (),
    AnyPipe Comma<inferrable_param> "|[]" "->" ty "{" Expr "}" => (),
};

StructExprFields: () = {
    FieldValues => (),
    FieldValues "," => (),
    FieldValues "," ".." Expr => (),
    ".." Expr => ()
};

// Note: this is not the same as Comma<FieldValue>, because it does
// not admit an empty list, and it also does not accept a trailing `,`.
FieldValues: () = {
    FieldValue => (),
    FieldValues "," FieldValue => (),
};

FieldValue: () = {
    ident ":" Expr => ()
};

ExprStmtLike: () = {
  ExprMatch => (),
  ExprIf => (),
  ExprIfLet => (),
  ExprWhile => (),
  ExprWhileLet => (),
  ExprLoop => (),
  ExprFor => (),
  "unsafe" block => (),
  PathExpr "!" ident? braces_delimited_token_trees => (),
};
ExprStmtLikeSuffix: () = {
  ExprStmtLike => (),
  ExprStmtLikeSuffix "." Path<"::"> => (),
  ExprStmtLikeSuffix "." Path<"::"> "[" Expr? "]" => (),
  ExprStmtLikeSuffix "." Path<"::"> "(" Comma<Expr> ")" => (),
  ExprStmtLikeSuffix "." LIT_INTEGER => (),
};
ExprMatch: () = {
  "match" ExprNoStruct "{" "}" => (),
  "match" ExprNoStruct "{" match_clauses "}" => (),
  "match" ExprNoStruct "{" match_clauses nonblock_match_clause "}" => (),
  "match" ExprNoStruct "{" nonblock_match_clause "}" => (),
};
match_clauses: () = {
  match_clause => (),
  match_clauses match_clause => (),
};
match_clause: () = {
  nonblock_match_clause "," => (),
  block_match_clause => (),
  block_match_clause "," => (),
};
nonblock_match_clause: () = {
  maybe_outer_attrs pats_or maybe_guard "=>" ExprNoStmtLike => (),
  maybe_outer_attrs pats_or maybe_guard "=>" ExprStmtLikeSuffix => (),
};
block_match_clause: () = {
  maybe_outer_attrs pats_or maybe_guard "=>" block => (),
};
maybe_guard: () = {
  "if" ExprNoStruct => (),
  () => (),
};
ExprIf: () = {
  "if" ExprNoStruct block => (),
  "if" ExprNoStruct block "else" block_or_if => (),
};
ExprIfLet: () = {
  "if" "let" Pat "=" ExprNoStruct block => (),
  "if" "let" Pat "=" ExprNoStruct block "else" block_or_if => (),
};
block_or_if: () = {
  block => (),
  ExprIf => (),
  ExprIfLet => (),
};
ExprWhile: () = {
  maybe_label "while" ExprNoStruct block => (),
};
ExprWhileLet: () = {
  maybe_label "while" "let" Pat "=" ExprNoStruct block => (),
};
ExprLoop: () = {
  maybe_label "loop" block => (),
};
ExprFor: () = {
  maybe_label "for" Pat "in" ExprNoStruct block => (),
};
maybe_label: () = {
  lifetime ":" => (),
  () => (),
};
let: () = {
  "let" Pat maybe_ty_ascription maybe_init_expr ";" => (),
};
lit: () = {
  LIT_BYTE => (),
  LIT_CHAR => (),
  LIT_INTEGER => (),
  LIT_FLOAT => (),
  "true" => (),
  "false" => (),
  str => (),
};
str: () = {
  LIT_STR => (),
  LIT_STR_RAW => (),
  LIT_BYTE_STR => (),
  LIT_BYTE_STR_RAW => (),
};
ident: () = {
  IDENT => (),
};
unpaired_token: () = {
  "==" => (),
  "!=" => (),
  "-=" => (),
  "&=" => (),
  "|=" => (),
  "+=" => (),
  "*=" => (),
  "/=" => (),
  "^=" => (),
  "%=" => (),
  ".." => (),
  "..." => (),
  "::" => (),
  "->" => (),
  LIT_BYTE => (),
  LIT_CHAR => (),
  LIT_INTEGER => (),
  LIT_FLOAT => (),
  LIT_STR => (),
  LIT_STR_RAW => (),
  LIT_BYTE_STR => (),
  LIT_BYTE_STR_RAW => (),
  IDENT => (),
  "_" => (),
  LIFETIME => (),
  "self" => (),
  "super" => (),
  "static" => (),
  "as" => (),
  "break" => (),
  "crate" => (),
  "else" => (),
  "enum" => (),
  "extern" => (),
  "false" => (),
  "fn" => (),
  "for" => (),
  "if" => (),
  "impl" => (),
  "in" => (),
  "let" => (),
  "loop" => (),
  "match" => (),
  "mod" => (),
  "move" => (),
  "mut" => (),
  "priv" => (),
  "pub" => (),
  "ref" => (),
  "return" => (),
  "struct" => (),
  "true" => (),
  "trait" => (),
  "type" => (),
  "unsafe" => (),
  "use" => (),
  "while" => (),
  "continue" => (),
  "box" => (),
  "const" => (),
  "where" => (),
  "typeof" => (),
  INNER_DOC_COMMENT => (),
  OUTER_DOC_COMMENT => (),
  SHEBANG => (),
  "'static" => (),
  ";" => (),
  "," => (),
  "." => (),
  "@" => (),
  "#" => (),
  "~" => (),
  ":" => (),
  "$" => (),
  "=" => (),
  "?" => (),
  "!" => (),
  "<<=" => (),
  ">>=" => (),
  "<-" => (),
  "<=" => (),
  ">=" => (),
  "<[<]" => (),
  "<[]" => (),
  ">[>]" => (),
  ">[]" => (),
  "-" => (),
  "|[|]" => (),
  "|[]" => (),
  "&[&]" => (),
  "&[]" => (),
  "+" => (),
  "*" => (),
  "/" => (),
  "^" => (),
  "%" => (),
};
token_trees: () = {
  () => (),
  token_trees token_tree => (),
};
token_tree: () = {
  delimited_token_trees => (),
  unpaired_token => (),
};
delimited_token_trees: () = {
  parens_delimited_token_trees => (),
  braces_delimited_token_trees => (),
  brackets_delimited_token_trees => (),
};
parens_delimited_token_trees: () = {
  "(" token_trees ")" => (),
};
braces_delimited_token_trees: () = {
  "{" token_trees "}" => (),
};
brackets_delimited_token_trees: () = {
  "[" token_trees "]" => (),
};

maybe_ident: () = {
  () => (),
  ident => (),
};

#[inline]
Comma<E>: () =
    Delim<E,",">;

#[inline]
Delim<E,D>: () =
    <v0:(<E> D)*> <e1:E?> => ();

#[inline]
AnyPipe: () = {
    "|[|]" => (),
    "|[]" => (),
};

#[inline]
AnyAmp: () = {
    "&[&]" => (),
    "&[]" => (),
};

// Extract one `<` when used as part of a series of `<` in a row, like
// `<<` or `<<<` or `<<<<<`. Intended for use in types.
#[inline]
TyLt: () = {
    "<[<]" => (),
    "<[]" => (),
};

// Extract one `>` when used as part of a series of `>` in a row, like
// `>>` or `>>>` or `>>>>>`. Intended for use in types.
#[inline]
TyGt: () = {
    ">[>]" => (),
    ">[]" => (),
};

#[inline]
Epsilon: () = {
    () => ()
};

extern {
    enum &'input str {
        "!" => Token0,
        "#" => Token1,
        "$" => Token2,
        "%" => Token3,
        "(" => Token5,
        ")" => Token6,
        "*" => Token7,
        "+" => Token8,
        "," => Token9,
        "-" => Token10,
        "." => Token11,
        "/" => Token12,
        ":" => Token13,
        ";" => Token14,
        "=" => Token16,
        "?" => Token18,
        "@" => Token19,
        "[" => Token20,
        "]" => Token21,
        "^" => Token22,
        "{" => Token23,
        "}" => Token25,
        "~" => Token26,
        "==" => Token30,
        "!=" => Token31,
        "-=" => Token37,
        "&=" => Token38,
        "|=" => Token39,
        "+=" => Token40,
        "*=" => Token41,
        "/=" => Token42,
        "^=" => Token43,
        "%=" => Token44,
        ".." => Token45,
        "..." => Token46,
        "::" => Token47,
        "->" => Token48,
        "=>" => Token48b,

        "<<=" => Token15,
        ">>=" => Token15,
        "<-" => Token15,
        "<=" => Token15,
        ">=" => Token15,

        // Compute tokens. The notation `x[y]` means "an x adjacent to
        // a y" and the notation `x[]` means "an x adjacent to nothing
        // of interest". So if we see `<<`, we will produce two
        // tokens: `<[<] <[]`, but if we see `<<=`, we would produce
        // three tokens: `<[<=] <[=] =`.
        "|[|]" => Token24a,  // "|" followed immediately by another "|"
        "|[]" => Token24b,  // "|" followed by non-pipe
        "&[&]" => Token24c,  // as above
        "&[]" => Token24d,
        "<[<]" => Token15,
        "<[]" => Token15,
        ">[>]" => Token15,
        ">[]" => Token15,

        LIT_BYTE => Token51,
        LIT_CHAR => Token52,
        LIT_INTEGER => Token53,
        LIT_FLOAT => Token54,
        LIT_STR => Token55,
        LIT_STR_RAW => Token56,
        LIT_BYTE_STR => Token57,
        LIT_BYTE_STR_RAW => Token58,
        IDENT => Token59,
        "_" => Token60,
        LIFETIME => Token61,
        "self" => Token62,
        "super" => Token62,
        "static" => Token63,
        "as" => Token64,
        "break" => Token65,
        "crate" => Token66,
        "else" => Token67,
        "enum" => Token68,
        "extern" => Token69,
        "false" => Token70,
        "fn" => Token71,
        "for" => Token72,
        "if" => Token73,
        "impl" => Token74,
        "in" => Token75,
        "let" => Token76,
        "loop" => Token77,
        "match" => Token78,
        "mod" => Token79,
        "move" => Token80,
        "mut" => Token81,
        "priv" => Token82,
        "pub" => Token83,
        "ref" => Token84,
        "return" => Token85,
        "struct" => Token86,
        "true" => Token87,
        "trait" => Token88,
        "type" => Token89,
        "unsafe" => Token90,
        "use" => Token91,
        "while" => Token92,
        "continue" => Token93,
        "box" => Token95,
        "const" => Token96,
        "where" => Token97,
        "typeof" => Token98,
        INNER_DOC_COMMENT => Token99,
        OUTER_DOC_COMMENT => Token100,
        SHEBANG => Token101,
        SHEBANG_LINE => Token102,
        "'static" => Token103,
    }
}
