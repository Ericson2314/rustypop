// FIXME#1
//
// We currently accept `if return { /* expr */ } { /* then */ }` but
// it is unclear if we *should* do so (in fact, I would argue that we
// should not, because it is inconsistent with `if Struct { ... }`)
// and `if 3 .. {`. Options to resolve:
//
//    - disallow `if return/break/continue` altogether
//      - I lump in `break/continue` to allow for future compat where
//        they take an argument, but also because they are all
//        unconditionall diverging control-flow expressions
//    - permit `if return/break/continue` but not with a block argument
//      - consistent, but what's the point?
//    - kepe things as they are today
//
// I opted for #1 so far.
//
// FIXME#2
//
// I am currently disallowing things like `x as (i32) < y as (i32)`;
// to fix this I have to propagate the restrictions against type
// arguments into the Ty grammar.

grammar;

pub Crate: () = {
  Shebang? InnerAttr* ModItem*,
};

Shebang: () = {
    SHEBANG_LINE,
};

InnerAttr: () = {
    SHEBANG "[" MetaItem "]",
    INNER_DOC_COMMENT,
};

MaybeOuterAttrs: () = {
    OuterAttrs?,
};

OuterAttrs: () = {
    OuterAttr,
    OuterAttrs OuterAttr,
};

OuterAttr: () = {
    "#" "[" MetaItem "]",
    OUTER_DOC_COMMENT,
};

MetaItem: () = {
    Ident,
    Ident "=" Lit,
    Ident "(" Comma<MetaItem> ")",
};

AttrsAndVis: () = {
    MaybeOuterAttrs visibility,
};

ModItem: () = {
    AttrsAndVis item,
};

item: () = {
  StmtItem,
  ItemMacro,
};

StmtItem: () = {
  ItemStatic,
  ItemConst,
  ItemType,
  BlockItem,
  ViewItem,
};

ItemStatic: () = {
    "static" "mut"? Ident ":" ty "=" Expr ";",
};

ItemConst: () = {
    "const" Ident ":" ty "=" Expr ";",
};

ItemMacro: () = {
    PathExpr "!" Ident? parens_delimited_token_trees ";",
    PathExpr "!" Ident? braces_delimited_token_trees,
    PathExpr "!" Ident? brackets_delimited_token_trees ";",
};

ViewItem: () = {
    ItemUse,
    ExternFnItem,
    "extern" "crate" Ident ("as" Ident)? ";",
};

ExternFnItem: () = {
    "extern" Abi ItemFn,
};

ItemUse: () = {
    "use" ViewPath ";",
};

ViewPath: () = {
    PathNoTypes,
    PathNoTypes "::" "{" "}",
    "::" "{" "}",
    PathNoTypes "::" "{" IdentsOrSelf "}",
    "::" "{" IdentsOrSelf "}",
    PathNoTypes "::" "{" IdentsOrSelf "," "}",
    "::" "{" IdentsOrSelf "," "}",
    PathNoTypes "::" "*",
    "{" "}",
    "{" IdentsOrSelf "}",
    "{" IdentsOrSelf "," "}",
    PathNoTypes "as" Ident,
};

BlockItem: () = {
  ItemFn,
  ItemUnsafeFn,
  ItemMod,
  ItemForeignMod,
  ItemStruct,
  item_enum,
  item_trait,
  item_impl,
};

MaybeTyAscription: () = {
  (":" TySum)?
};

MaybeInitExpr: () = {
  ("=" Expr)?
};

ItemStruct: () = {
  "struct" Ident GenericParams MaybeWhereClause struct_decl_args,
  "struct" Ident GenericParams struct_tuple_args MaybeWhereClause ";",
  "struct" Ident GenericParams MaybeWhereClause ";",
};

struct_decl_args: () = {
  "{" struct_decl_fields "}",
  "{" struct_decl_fields "," "}",
};
struct_tuple_args: () = {
  "(" struct_tuple_fields ")",
  "(" struct_tuple_fields "," ")",
};
struct_decl_fields: () = {
  struct_decl_field,
  struct_decl_fields "," struct_decl_field,
  (),
};
struct_decl_field: () = {
  AttrsAndVis Ident ":" TySum,
};
struct_tuple_fields: () = {
  struct_tuple_field,
  struct_tuple_fields "," struct_tuple_field,
};
struct_tuple_field: () = {
  AttrsAndVis TySum,
};

item_enum: () = {
    "enum" Ident GenericParams MaybeWhereClause "{" Comma1<EnumDef> "}",
};

EnumDef: () = {
    AttrsAndVis Ident EnumArgs
};

EnumArgs: () = {
    "{" struct_decl_fields "}",
    "{" struct_decl_fields "," "}",
    "(" MaybeTySums ")",
    "=" Expr,
    (),
};

ItemMod: () = {
  "mod" Ident ";",
  "mod" Ident "{" InnerAttr* ModItem* "}",
};

ItemForeignMod: () = {
  "extern" Abi "{" InnerAttr* ForeignItem* "}",
};

Abi: () = {
  StringLiteral?
};

ForeignItem: () = {
  AttrsAndVis "static" item_foreign_static,
  AttrsAndVis item_foreign_fn,
  AttrsAndVis "unsafe" item_foreign_fn,
};
item_foreign_static: () = {
  "mut"? Ident ":" ty ";",
};
item_foreign_fn: () = {
  "fn" Ident GenericParams fn_decl_allow_variadic MaybeWhereClause ";",
};
fn_decl_allow_variadic: () = {
  fn_params_allow_variadic RetTy,
};
fn_params_allow_variadic: () = {
  "(" ")",
  "(" params ")",
  "(" params "," ")",
  "(" params "," "..." ")",
};
visibility: () = {
  "pub",
  (),
};
IdentsOrSelf: () = {
  IdentOrSelf,
  IdentOrSelf "as" Ident,
  IdentsOrSelf "," IdentOrSelf,
};
IdentOrSelf: () = {
  Ident,
  "self",
};
ItemType: () = {
  "type" Ident GenericParams MaybeWhereClause "=" TySum ";",
};
for_sized: () = {
  "for" "?" Ident,
  "for" Ident "?",
  (),
};
item_trait: () = {
  Maybeunsafe "trait" Ident GenericParams for_sized MaybeTyParamBounds MaybeWhereClause "{" Maybetrait_items "}",
};
Maybetrait_items: () = {
  trait_items,
  (),
};
trait_items: () = {
  trait_item,
  trait_items trait_item,
};
trait_item: () = {
  trait_const,
  trait_type,
  trait_method,
};
trait_const: () = {
  MaybeOuterAttrs "const" Ident MaybeTyAscription Maybeconst_default ";",
};
Maybeconst_default: () = {
  "=" Expr,
  (),
};
trait_type: () = {
  MaybeOuterAttrs "type" TyParam ";",
};
Maybeunsafe: () = {
  "unsafe",
  (),
};
trait_method: () = {
  type_method,
  method,
};
type_method: () = {
  AttrsAndVis Maybeunsafe "fn" Ident GenericParams fn_decl_with_self_allow_anon_params MaybeWhereClause ";",
  AttrsAndVis Maybeunsafe "extern" Abi "fn" Ident GenericParams fn_decl_with_self_allow_anon_params MaybeWhereClause ";",
};
method: () = {
  AttrsAndVis Maybeunsafe "fn" Ident GenericParams fn_decl_with_self_allow_anon_params MaybeWhereClause InnerAttrs_and_block,
  AttrsAndVis Maybeunsafe "extern" Abi "fn" Ident GenericParams fn_decl_with_self_allow_anon_params MaybeWhereClause InnerAttrs_and_block,
};
impl_method: () = {
  AttrsAndVis Maybeunsafe "fn" Ident GenericParams fn_decl_with_self MaybeWhereClause InnerAttrs_and_block,
  AttrsAndVis Maybeunsafe "extern" Abi "fn" Ident GenericParams fn_decl_with_self MaybeWhereClause InnerAttrs_and_block,
};
item_impl: () = {
  Maybeunsafe "impl" GenericParams ty_prim_sum MaybeWhereClause "{" InnerAttr* Maybeimpl_items "}",
  Maybeunsafe "impl" GenericParams "(" ty ")" MaybeWhereClause "{" InnerAttr* Maybeimpl_items "}",
  Maybeunsafe "impl" GenericParams TraitRef "for" TySum MaybeWhereClause "{" InnerAttr* Maybeimpl_items "}",
  Maybeunsafe "impl" GenericParams "!" TraitRef "for" TySum MaybeWhereClause "{" InnerAttr* Maybeimpl_items "}",
  Maybeunsafe "impl" GenericParams TraitRef "for" ".." "{" "}",
  Maybeunsafe "impl" GenericParams "!" TraitRef "for" ".." "{" "}",
};
Maybeimpl_items: () = {
  impl_items,
  (),
};
impl_items: () = {
  impl_item,
  impl_item impl_items,
};
impl_item: () = {
  impl_method,
  AttrsAndVis ItemMacro,
  impl_const,
  impl_type,
};
impl_const: () = {
  AttrsAndVis ItemConst,
};
impl_type: () = {
  AttrsAndVis "type" Ident GenericParams "=" TySum ";",
};
ItemFn: () = {
  "fn" Ident GenericParams fn_decl MaybeWhereClause InnerAttrs_and_block,
};
ItemUnsafeFn: () = {
  "unsafe" "fn" Ident GenericParams fn_decl MaybeWhereClause InnerAttrs_and_block,
  "unsafe" "extern" Abi "fn" Ident GenericParams fn_decl MaybeWhereClause InnerAttrs_and_block,
};
fn_decl: () = {
  fn_params RetTy,
};
fn_decl_with_self: () = {
  fn_params_with_self RetTy,
};
fn_decl_with_self_allow_anon_params: () = {
  fn_anon_params_with_self RetTy,
};
fn_params: () = {
  "(" Maybeparams ")",
};
fn_anon_params: () = {
  "(" anon_param anon_params_allow_variadic_tail ")",
  "(" ")",
};
fn_params_with_self: () = {
  "(" "mut"? "self" MaybeTyAscription Maybecomma_params ")",
  "(" "&[]" "mut"? "self" MaybeTyAscription Maybecomma_params ")",
  "(" "&[]" Lifetime "mut"? "self" MaybeTyAscription Maybecomma_params ")",
  "(" Maybeparams ")",
};
fn_anon_params_with_self: () = {
  "(" "mut"? "self" MaybeTyAscription Maybecomma_anon_params ")",
  "(" "&[]" "mut"? "self" MaybeTyAscription Maybecomma_anon_params ")",
  "(" "&[]" Lifetime "mut"? "self" MaybeTyAscription Maybecomma_anon_params ")",
  "(" Maybeanon_params ")",
};
Maybeparams: () = {
  params,
  params ",",
  (),
};
params: () = {
  param,
  params "," param,
};
param: () = {
  Pat ":" TySum,
};
inferrable_param: () = {
  Pat MaybeTyAscription,
};
Maybecomma_params: () = {
  ",",
  "," params,
  "," params ",",
  (),
};
Maybecomma_anon_params: () = {
  ",",
  "," anon_params,
  "," anon_params ",",
  (),
};
Maybeanon_params: () = {
  anon_params,
  anon_params ",",
  (),
};
anon_params: () = {
  anon_param,
  anon_params "," anon_param,
};
anon_param: () = {
  named_arg ":" ty,
  ty,
};
anon_params_allow_variadic_tail: () = {
  "," "...",
  "," anon_param anon_params_allow_variadic_tail,
  (),
};
named_arg: () = {
  Ident,
  "_",
  "&[]" Ident,
  "&[]" "_",
  "mut" Ident,
};
RetTy: () = {
    "->" "!",
    "->" ty,
    (),
};
GenericParams: () = {
    TyLt Comma1<LifetimeAndBounds> TyGt,
    TyLt (LifetimeAndBounds ",")+ Comma1<TyParam> TyGt,
    TyLt Comma1<TyParam> TyGt,
    TyLt TyGt,
};
MaybeWhereClause: () = {
  WhereClause?
};
WhereClause: () = {
  "where" Comma<WherePredicate>
};
WherePredicate: () = {
  ForLifetimes? Lifetime ":" bounds,
  ForLifetimes ty ":" ty_param_bounds,
};
ForLifetimes: () = {
  "for" TyLt Lifetimes TyGt,
};

PathNoTypes: () = {
  Ident,
  "::" Ident,
  "self",
  "::" "self",
  PathNoTypes "::" Ident,
};
GenericArgs: () = {
  TyLt GenericValues TyGt,
};
GenericValues: () = {
  MaybeLifetimes MaybeTySumsAndOrBindings,
};
MaybeTySumsAndOrBindings: () = {
  TySums,
  TySums ",",
  TySums "," bindings,
  bindings,
  bindings ",",
  (),
};
Maybebindings: () = {
  "," bindings,
  (),
};

#[inline]
Pat: () = PatWithBindingMode<BindingMode>;

PatWithBindingMode<BM>: () = {
    "_",
    AnyAmp PatWithBindingMode<RefBindingMode>,
    AnyAmp "mut" Pat,
    "(" Comma<Pat> ")",
    "[" PatVec "]",
    LitOrPath,
    LitOrPath "..." LitOrPath,
    PathExpr "{" PatStruct "}",
    PathExpr "(" ".." ")",
    PathExpr "(" Comma<Pat> ")",
    PathExpr "!" Ident? delimited_token_trees,
    BM Ident,
    Ident "@" Pat,
    BM Ident "@" Pat,
    "box" Pat,
    TyLt TySum MaybeAsTraitRef TyGt "::" Ident,
};
pats_or: () = {
  Pat,
  pats_or "|[]" Pat,
};
BindingMode: () = {
    RefBindingMode,
    "mut",
};
RefBindingMode: () = {
    "ref",
    "ref" "mut",
};
LitOrPath: () = {
  PathExpr,
  Lit,
  "-" Lit,
};
PatField: () = {
  Ident,
  BindingMode Ident,
  "box" Ident,
  "box" BindingMode Ident,
  Ident ":" Pat,
  BindingMode Ident ":" Pat,
};
PatFields: () = {
  PatField,
  PatFields "," PatField,
};
PatStruct: () = {
  PatFields,
  PatFields ",",
  PatFields "," "..",
  "..",
};
PatVec: () = {
  PatVec_elts,
  PatVec_elts ",",
  PatVec_elts "..",
  PatVec_elts "," "..",
  PatVec_elts ".." "," PatVec_elts,
  PatVec_elts ".." "," PatVec_elts ",",
  PatVec_elts "," ".." "," PatVec_elts,
  PatVec_elts "," ".." "," PatVec_elts ",",
  ".." "," PatVec_elts,
  ".." "," PatVec_elts ",",
  "..",
  (),
};
PatVec_elts: () = {
  Pat,
  PatVec_elts "," Pat,
};
ty: () = {
  ty_prim,
  TyLt TySum MaybeAsTraitRef TyGt "::" Ident,
  "(" TySums ")",
  "(" TySums "," ")",
  "(" ")",
};
ty_prim: () = {
  Path<Epsilon>,
  "box" ty,
  "*" mut_or_const ty,
  AnyAmp ty,
  AnyAmp "mut" ty,
  AnyAmp Lifetime "mut"? ty,
  "[" ty "]",
  "[" ty "," ".." Expr "]",
  "[" ty ";" Expr "]",
  "typeof" "(" Expr ")",
  "_",
  ty_bare_fn,
  for_in_type,
};
ty_bare_fn: () = {
  "fn" ty_fn_decl,
  "unsafe" "fn" ty_fn_decl,
  "extern" Abi "fn" ty_fn_decl,
  "unsafe" "extern" Abi "fn" ty_fn_decl,
};
ty_fn_decl: () = {
  GenericParams fn_anon_params RetTy,
};
for_in_type: () = {
  "for" TyLt MaybeLifetimes TyGt for_in_type_suffix,
};
for_in_type_suffix: () = {
  ty_bare_fn,
  TraitRef,
};
mut_or_const: () = {
  "mut",
  "const",
};
ty_qualified_path_and_GenericValues: () = {
  ty_qualified_path Maybebindings,
  ty_qualified_path "," TySums Maybebindings,
};
ty_qualified_path: () = {
  TySum "as" TraitRef TyGt "::" Ident,
  TySum "as" TraitRef TyGt "::" Ident "+" ty_param_bounds,
};
MaybeTySums: () = {
  TySums,
  TySums ",",
  (),
};
TySums: () = {
  TySum,
  TySums "," TySum,
};
TySum: () = {
  ty,
  ty "+" ty_param_bounds,
};
ty_prim_sum: () = {
  ty_prim,
  ty_prim "+" ty_param_bounds,
};
MaybeTyParamBounds: () = {
    (":" ty_param_bounds)?
};
ty_param_bounds: () = {
  boundseq,
  (),
};
boundseq: () = {
  polybound,
  boundseq "+" polybound,
};
polybound: () = {
  "for" TyLt MaybeLifetimes TyGt bound,
  bound,
  "?" bound,
};
bindings: () = {
  binding,
  bindings "," binding,
};
binding: () = {
  Ident "=" ty,
};
TyParam: () = {
  Ident MaybeTyParamBounds MaybeTyDefault,
  Ident "?" Ident MaybeTyParamBounds MaybeTyDefault,
};
Maybebounds: () = {
  ":" bounds,
  (),
};
bounds: () = {
  bound,
  bounds "+" bound,
};
bound: () = {
  Lifetime,
  TraitRef,
};
MaybeLifetimeBounds: () = {
    (":" LifetimeBounds)?
};
LifetimeBounds: () = {
    Lifetime,
    LifetimeBounds "+" Lifetime,
};
MaybeTyDefault: () = {
    ("=" TySum)?
};
MaybeLifetimes: () = Comma<LifetimeAndBounds>;
Lifetimes: () = Comma1<LifetimeAndBounds>;
LifetimeAndBounds: () = {
  LIFETIME MaybeLifetimeBounds,
  "'static",
};
Lifetime: () = {
  LIFETIME,
  "'static",
};
TraitRef: () = {
  Path<Epsilon>,
};
InnerAttrs_and_block: () = {
  "{" InnerAttr* Maybestmts "}",
};
block: () = {
  "{" Maybestmts "}",
};
Maybestmts: () = {
  stmts,
  stmts ExprNoStmtLike,
  ExprNoStmtLike,
  (),
};
stmts: () = {
  stmt,
  stmts stmt,
};
stmt: () = {
  Let,
  StmtItem,
  "pub" StmtItem,
  OuterAttrs StmtItem,
  OuterAttrs "pub" StmtItem,
  ExprStmtLike,
  block,
  ExprNoStmtLike ";",
  ";",
};

PathExpr: () = {
    Path<"::">
};

// Parses a path like `x::y::z`, where A is the token that separates
// the generic arguments.
Path<ARG_SEP>: () = {
    Ident,
    "::" Ident,
    "self" "::" Ident,
    "super" "::" Ident,
    Path<ARG_SEP> "::" Ident,
    Path<ARG_SEP> ARG_SEP GenericArgs,
};

MacroExpr: () = {
  PathExpr "!" Ident? parens_delimited_token_trees,
  PathExpr "!" Ident? brackets_delimited_token_trees,
};

// New-style names:
Expr: () = ExprRestricted<"S","B","L">;
ExprNoStruct: () = ExprRestricted<"","B","L">;
ExprNoStmtLike: () = ExprRestricted<"S","","">;

// The parameters must be either "" or "[SBLT]". They
// are used to select subsets of expressions. Not all
// the parameters apply to all subsets of expressions.
//
// - S: if non-empty, include struct expressions
// - B: if non-empty, include block expressions
// - L: if non-empty, include stmt-like expressions
// - T: if non-empty, include expressions ending in a type
ExprRestricted<S,B,L>: () = {
    ExprOrOr<S,B,L>,
    "return" if S != "", // FIXME#1
    "return" ExprOptionalRhs<S,"B","L"> if S != "", // FIXME#1
    "..",
    LambdaExpr<S,B,L>,
    "move" LambdaExpr<S,B,L>,
    ExprOrOr<S,B,L> "=" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> "<-" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> "..",
    ExprOrOr<S,B,L> ".." ExprOptionalRhs<S,"B","L">,
    ExprOrOr<S,B,L> "<<=" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> ">>=" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> "-=" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> "&=" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> "|=" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> "+=" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> "*=" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> "/=" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> "^=" ExprRestricted<S,"B","L">,
    ExprOrOr<S,B,L> "%=" ExprRestricted<S,"B","L">,
};

// When you have an optional RHS, such as in a `..` expression, we
// can't allow block expressions if we are not allowed struct
// expressions. So toggle B to "" if S is "". The reason is that
// otherwise you get an ambiguity:
//
//     ... if 0 .. { 22 } ...
//                 ^~~~~~ body of the if, or RHS of the `..`?
ExprOptionalRhs<S,B,L>: () = {
    ExprRestricted<S,"",L> if S == "", // if structs are disabled, disable blocks
    ExprRestricted<S,B,L> if S != "", // if structs are enabled, pass everything thru
};

ExprOrOr<S,B,L>: () = {
    ExprAndAnd<S,B,L>,
    ExprOrOr<S,B,L> "|[|]" "|[]" ExprAndAnd<S,"B","L">,
};

ExprAndAnd<S,B,L>: () = {
    ExprEq<S,B,L>,
    ExprAndAnd<S,B,L> "&[&]" "&[]" ExprEq<S,"B","L">,
};

ExprEq<S,B,L>: () = {
    ExprEqOp<S,B,L>,
};

ExprEqOp<S,B,L>: () = {
    ExprOr<S,B,L,"T">,
    ExprOr<S,B,L,"T"> "==" ExprOr<S,"B","L","T">,
    ExprOr<S,B,L,"T"> "!=" ExprOr<S,"B","L","T">,
    ExprOr<S,B,L,""> "<[]" ExprOr<S,"B","L","T">,
    ExprOr<S,B,L,"T"> ">[]" ExprOr<S,"B","L","T">,
    ExprOr<S,B,L,"T"> "<=" ExprOr<S,"B","L","T">,
    ExprOr<S,B,L,"T"> ">=" ExprOr<S,"B","L","T">,
};

ExprOr<S,B,L,T>: () = {
    ExprXor<S,B,L,T>,
    ExprOr<S,B,L,"T"> "|[]" ExprXor<S,"B","L",T>,
};

ExprXor<S,B,L,T>: () = {
    ExprAnd<S,B,L,T>,
    ExprXor<S,B,L,"T"> "^" ExprAnd<S,"B","L",T>,
};

ExprAnd<S,B,L,T>: () = {
    ExprShift<S,B,L,T>,
    ExprAnd<S,B,L,"T"> "&[]" ExprShift<S,"B","L",T>,
};

ExprShift<S,B,L,T>: () = {
    ExprPlusMinus<S,B,L,T>,
    ExprShift<S,B,L,""> "<[<]" "<[]" ExprPlusMinus<S,"B","L",T>,
    ExprShift<S,B,L,"T"> ">[>]" ">[]" ExprPlusMinus<S,"B","L",T>,
};

ExprPlusMinus<S,B,L,T>: () = {
    ExprMulDiv<S,B,L,T>,
    ExprPlusMinus<S,B,L,"T"> "+" ExprMulDiv<S,"B","L",T>,
    ExprPlusMinus<S,B,L,"T"> "-" ExprMulDiv<S,"B","L",T>,
};

ExprMulDiv<S,B,L,T>: () = {
    ExprAs<S,B,L,T>,
    ExprMulDiv<S,B,L,"T"> "*" ExprAs<S,"B","L",T>,
    ExprMulDiv<S,B,L,"T"> "/" ExprAs<S,"B","L",T>,
    ExprMulDiv<S,B,L,"T"> "%" ExprAs<S,"B","L",T>,
};

ExprAs<S,B,L,T>: () = {
    ExprSuffix<S,B,L>,
    ExprSuffix<S,B,L> "as" ty if T != "", // FIXME#2
};

ExprSuffix<S,B,L>: () = {
    ExprAtom<S,B,L>,
    ExprSuffix<S,B,L> "." Path<"::">,
    ExprSuffix<S,B,L> "." LIT_INTEGER,
    ExprSuffix<S,B,L> "[" Expr "]",
    ExprSuffix<S,B,L> "(" Comma<Expr> ")",
};

ExprPrefix<S,B,L>: () = {
    "box" ExprPrefix<S,"B","L">,
    "-" ExprPrefix<S,"B","L">,
    "!" ExprPrefix<S,"B","L">,
    "*" ExprPrefix<S,"B","L">,
    AnyAmp "mut"? ExprPrefix<S,"B","L">,
};

ExprAtom<S,B,L>: () = {
    Lit,
    PathExpr,
    "self",
    MacroExpr,
    PathExpr "{" StructExprFields "}" if S != "",
    "(" Comma<Expr> ")",
    "[" Comma<Expr> "]",
    "[" Expr ";" Expr "]",
    "continue" if S != "", // FIXME#1
    "continue" Ident if S != "", // FIXME#1
    "break" if S != "", // FIXME#1
    "break" Ident if S != "", // FIXME#1
    Expr_qualified_path,
    ExprStmtLike if L != "",
    block if B != "",
};

Expr_qualified_path: () = {
  TyLt TySum MaybeAsTraitRef TyGt "::" Ident Maybeqpath_params,
};

Maybeqpath_params: () = {
  "::" GenericArgs,
  (),
};

MaybeAsTraitRef: () = {
    ("as" TraitRef)?
};

LambdaExpr<S,B,L>: () = {
    AnyPipe Comma<inferrable_param> "|[]" ExprRestricted<S,"B","L">,
    AnyPipe Comma<inferrable_param> "|[]" "->" ty "{" Expr "}",
};

StructExprFields: () = {
    FieldValues,
    FieldValues ",",
    FieldValues "," ".." Expr,
    ".." Expr,
};

// Note: this is not the same as Comma<FieldValue>, because it does
// not admit an empty list, and it also does not accept a trailing `,`.
FieldValues: () = {
    FieldValue,
    FieldValues "," FieldValue,
};

FieldValue: () = {
    Ident ":" Expr,
};

ExprStmtLike: () = {
  ExprMatch,
  ExprIf,
  ExprIfLet,
  ExprWhile,
  ExprWhileLet,
  ExprLoop,
  ExprFor,
  "unsafe" block,
  PathExpr "!" Ident? braces_delimited_token_trees,
};
ExprStmtLikeSuffix: () = {
  ExprStmtLike,
  ExprStmtLikeSuffix "." Path<"::">,
  ExprStmtLikeSuffix "." Path<"::"> "[" Expr? "]",
  ExprStmtLikeSuffix "." Path<"::"> "(" Comma<Expr> ")",
  ExprStmtLikeSuffix "." LIT_INTEGER,
};
ExprMatch: () = {
  "match" ExprNoStruct "{" "}",
  "match" ExprNoStruct "{" match_clauses "}",
  "match" ExprNoStruct "{" match_clauses nonblock_match_clause "}",
  "match" ExprNoStruct "{" nonblock_match_clause "}",
};
match_clauses: () = {
  match_clause,
  match_clauses match_clause,
};
match_clause: () = {
  nonblock_match_clause ",",
  block_match_clause,
  block_match_clause ",",
};
nonblock_match_clause: () = {
  MaybeOuterAttrs pats_or Maybeguard "=>" ExprNoStmtLike,
  MaybeOuterAttrs pats_or Maybeguard "=>" ExprStmtLikeSuffix,
};
block_match_clause: () = {
  MaybeOuterAttrs pats_or Maybeguard "=>" block,
};
Maybeguard: () = {
  "if" ExprNoStruct,
  (),
};
ExprIf: () = {
  "if" ExprNoStruct block,
  "if" ExprNoStruct block "else" BlockOrIf,
};
ExprIfLet: () = {
  "if" "let" Pat "=" ExprNoStruct block,
  "if" "let" Pat "=" ExprNoStruct block "else" BlockOrIf,
};

BlockOrIf: () = {
  block,
  ExprIf,
  ExprIfLet,
};

ExprWhile: () = {
  MaybeLabel "while" ExprNoStruct block,
};

ExprWhileLet: () = {
  MaybeLabel "while" "let" Pat "=" ExprNoStruct block,
};

ExprLoop: () = {
  MaybeLabel "loop" block,
};

ExprFor: () = {
  MaybeLabel "for" Pat "in" ExprNoStruct block,
};

MaybeLabel: () = {
    (Lifetime ":")?
};

Let: () = {
    "let" Pat MaybeTyAscription MaybeInitExpr ";",
};

Lit: () = {
    LIT_BYTE,
    LIT_CHAR,
    LIT_INTEGER,
    LIT_FLOAT,
    "true",
    "false",
    StringLiteral,
};

StringLiteral: () = {
  LIT_STR,
  LIT_STR_RAW,
  LIT_BYTE_STR,
  LIT_BYTE_STR_RAW,
};

Ident: () = {
  IDENT,
};
unpaired_token: () = {
  "==",
  "!=",
  "-=",
  "&=",
  "|=",
  "+=",
  "*=",
  "/=",
  "^=",
  "%=",
  "..",
  "...",
  "::",
  "->",
  LIT_BYTE,
  LIT_CHAR,
  LIT_INTEGER,
  LIT_FLOAT,
  LIT_STR,
  LIT_STR_RAW,
  LIT_BYTE_STR,
  LIT_BYTE_STR_RAW,
  IDENT,
  "_",
  LIFETIME,
  "self",
  "super",
  "static",
  "as",
  "break",
  "crate",
  "else",
  "enum",
  "extern",
  "false",
  "fn",
  "for",
  "if",
  "impl",
  "in",
  "let",
  "loop",
  "match",
  "mod",
  "move",
  "mut",
  "priv",
  "pub",
  "ref",
  "return",
  "struct",
  "true",
  "trait",
  "type",
  "unsafe",
  "use",
  "while",
  "continue",
  "box",
  "const",
  "where",
  "typeof",
  INNER_DOC_COMMENT,
  OUTER_DOC_COMMENT,
  SHEBANG,
  "'static",
  ";",
  ",",
  ".",
  "@",
  "#",
  "~",
  ":",
  "$",
  "=",
  "?",
  "!",
  "<<=",
  ">>=",
  "<-",
  "<=",
  ">=",
  "<[<]",
  "<[]",
  ">[>]",
  ">[]",
  "-",
  "|[|]",
  "|[]",
  "&[&]",
  "&[]",
  "+",
  "*",
  "/",
  "^",
  "%",
};
token_trees: () = {
  (),
  token_trees token_tree,
};
token_tree: () = {
  delimited_token_trees,
  unpaired_token,
};
delimited_token_trees: () = {
  parens_delimited_token_trees,
  braces_delimited_token_trees,
  brackets_delimited_token_trees,
};
parens_delimited_token_trees: () = {
  "(" token_trees ")",
};
braces_delimited_token_trees: () = {
  "{" token_trees "}",
};
brackets_delimited_token_trees: () = {
  "[" token_trees "]",
};

MaybeIdent: () = {
  (),
  Ident,
};

// Comma-separated list with optional trailing comma.  Potentially
// empty.
#[inline]
Comma<E>: () =
    Delim<E,",">;

// Delimeted list of E with optional trailing delimeter. Potentially
// empty.
#[inline]
Delim<E,D>: () =
    (E D)* E?;

// Comma-separated list of length at least 1.
#[inline]
Comma1<E>: () =
    Delim1<E,",">;

// Delimited list of length at least 1.
#[inline]
Delim1<E,D>: () = {
    (E D)+,
    (E D)* E,
};

#[inline]
AnyPipe: () = {
    "|[|]",
    "|[]",
};

#[inline]
AnyAmp: () = {
    "&[&]",
    "&[]",
};

// Extract one `<` when used as part of a series of `<` in a row, like
// `<<` or `<<<` or `<<<<<`. Intended for use in types.
#[inline]
TyLt: () = {
    "<[<]",
    "<[]",
};

// Extract one `>` when used as part of a series of `>` in a row, like
// `>>` or `>>>` or `>>>>>`. Intended for use in types.
#[inline]
TyGt: () = {
    ">[>]",
    ">[]",
};

#[inline]
Epsilon: () = {
    (),
};

extern {
    enum &'input str {
        "!" => Token0,
        "#" => Token1,
        "$" => Token2,
        "%" => Token3,
        "(" => Token5,
        ")" => Token6,
        "*" => Token7,
        "+" => Token8,
        "," => Token9,
        "-" => Token10,
        "." => Token11,
        "/" => Token12,
        ":" => Token13,
        ";" => Token14,
        "=" => Token16,
        "?" => Token18,
        "@" => Token19,
        "[" => Token20,
        "]" => Token21,
        "^" => Token22,
        "{" => Token23,
        "}" => Token25,
        "~" => Token26,
        "==" => Token30,
        "!=" => Token31,
        "-=" => Token37,
        "&=" => Token38,
        "|=" => Token39,
        "+=" => Token40,
        "*=" => Token41,
        "/=" => Token42,
        "^=" => Token43,
        "%=" => Token44,
        ".." => Token45,
        "..." => Token46,
        "::" => Token47,
        "->" => Token48,
        "=>" => Token48b,

        "<<=" => Token15,
        ">>=" => Token15,
        "<-" => Token15,
        "<=" => Token15,
        ">=" => Token15,

        // Compute tokens. The notation `x[y]` means "an x adjacent to
        // a y" and the notation `x[]` means "an x adjacent to nothing
        // of interest". So if we see `<<`, we will produce two
        // tokens: `<[<] <[]`, but if we see `<<=`, we would produce
        // three tokens: `<[<=] <[=] =`.
        "|[|]" => Token24a,  // "|" followed immediately by another "|"
        "|[]" => Token24b,  // "|" followed by non-pipe
        "&[&]" => Token24c,  // as above
        "&[]" => Token24d,
        "<[<]" => Token15,
        "<[]" => Token15,
        ">[>]" => Token15,
        ">[]" => Token15,

        LIT_BYTE => Token51,
        LIT_CHAR => Token52,
        LIT_INTEGER => Token53,
        LIT_FLOAT => Token54,
        LIT_STR => Token55,
        LIT_STR_RAW => Token56,
        LIT_BYTE_STR => Token57,
        LIT_BYTE_STR_RAW => Token58,
        IDENT => Token59,
        "_" => Token60,
        LIFETIME => Token61,
        "self" => Token62,
        "super" => Token62,
        "static" => Token63,
        "as" => Token64,
        "break" => Token65,
        "crate" => Token66,
        "else" => Token67,
        "enum" => Token68,
        "extern" => Token69,
        "false" => Token70,
        "fn" => Token71,
        "for" => Token72,
        "if" => Token73,
        "impl" => Token74,
        "in" => Token75,
        "let" => Token76,
        "loop" => Token77,
        "match" => Token78,
        "mod" => Token79,
        "move" => Token80,
        "mut" => Token81,
        "priv" => Token82,
        "pub" => Token83,
        "ref" => Token84,
        "return" => Token85,
        "struct" => Token86,
        "true" => Token87,
        "trait" => Token88,
        "type" => Token89,
        "unsafe" => Token90,
        "use" => Token91,
        "while" => Token92,
        "continue" => Token93,
        "box" => Token95,
        "const" => Token96,
        "where" => Token97,
        "typeof" => Token98,
        INNER_DOC_COMMENT => Token99,
        OUTER_DOC_COMMENT => Token100,
        SHEBANG => Token101,
        SHEBANG_LINE => Token102,
        "'static" => Token103,
    }
}
